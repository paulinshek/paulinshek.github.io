longData <- do.call(rbind, relationshipStatusOverWave)
View(longData)
longData <- do.call(c, relationshipStatusOverWave)
longData
relationshipStatusOverWave[[1]]
relationshipStatusOverWave <- data.frame(`Original relationship status` = as.character(hcmst$qflag),
`Status at wave 2` = as.character(hcmst$w2_broke_up),
`Status at wave 3` = as.character(hcmst$w3_broke_up),
`Status at wave 4` = as.character(hcmst4$w4_xqualified),
`Status at wave 5` = as.character(hcmst5$w5x_qualified),
check.names = FALSE)
N <- length(hcmst$w2_broke_up)
status <- do.call(c, relationshipStatusOverWave)
status
length(status)
names(status) <- NULL
STATUS
status
relationshipStatusOverWave <- data.frame(`Original relationship status` = as.character(hcmst$qflag),
`Status at wave 2` = as.character(hcmst$w2_broke_up),
`Status at wave 3` = as.character(hcmst$w3_broke_up),
`Status at wave 4` = as.character(hcmst4$w4_xqualified),
`Status at wave 5` = as.character(hcmst5$w5x_qualified),
check.names = FALSE)
relationshipStatusOverWave <- data.frame(`Original relationship status` = as.character(hcmst$qflag),
`Status at wave 2` = as.character(hcmst$w2_broke_up),
`Status at wave 3` = as.character(hcmst$w3_broke_up),
`Status at wave 4` = as.character(hcmst4$w4_xqualified),
`Status at wave 5` = as.character(hcmst5$w5x_qualified),
check.names = FALSE, stringsAsFactors = FALSE)
N <- length(hcmst$w2_broke_up)
status <- do.call(c, relationshipStatusOverWave)
names(status) <- NULL
status
wave <- rep(1:5, each = N)
longData <- data.frame(Wave = wave, Status = status)
ggplot(data = longData, aes(x = Status, y = Wave)) + geom_bar(position = "stack")
ggplot(data = longData, aes(x = Status) + geom_bar(position = "stack")
ggplot(data = longData, aes(x = Status)) + geom_bar(position = "stack")
ggplot(data = longData, aes(x = Status)) + geom_bar(position = "stacked")
ggplot(data = longData, aes(x = Status)) + geom_bar(position = "stack", fill = "Wave")
ggplot(data = longData, aes(x = Status)) + geom_bar(position = "stack", aes(fill = "Wave"))
?geom_bar
ggplot(data = longData, aes(x = Status, fill = "stack")) + geom_bar()
ggplot(data = longData, aes(x = Status, fill = "Wave")) + geom_bar()
ggplot(data = longData, aes(x = Status, fill = Wave)) + geom_bar()
?geom_bar
?geom_bar
ggplot(data = longData, aes(x = Status, fill = Wave)) + geom_bar()
ggplot(data = longData, aes(x = Wave, fill = Status)) + geom_bar()
levels(hcmst$w2_broke_up)
dput(levels(hcmst$w2_broke_up))
levels(relationshipStatusOverWave$`Status at wave 2`)
relationshipStatusOverWave <- data.frame(`Original relationship status` = hcmst$qflag,
`Status at wave 2` = hcmst$w2_broke_up,
`Status at wave 3` = hcmst$w3_broke_up,
`Status at wave 4` = hcmst4$w4_xqualified,
`Status at wave 5` = hcmst5$w5x_qualified,
check.names = FALSE)
levels(relationshipStatusOverWave$`Status at wave 2`)
levels(relationshipStatusOverWave$`Status at wave 3`)
levels(relationshipStatusOverWave$`Status at wave 4`)
levels(relationshipStatusOverWave$`Status at wave 4`) <- c("Still together", "Broke up or partner deceased")
levels(relationshipStatusOverWave$`Status at wave 5`) <- c("Still together", "Broke up or partner deceased")
levels(relationshipStatusOverWave$`Status at wave 2`) <- c("Still together", "Broke up", "Partner deceased")
relationshipStatusOverWave <- data.frame(#`Original relationship status` = hcmst$qflag,
`Status at wave 2` = hcmst$w2_broke_up,
`Status at wave 3` = hcmst$w3_broke_up,
`Status at wave 4` = hcmst4$w4_xqualified,
`Status at wave 5` = hcmst5$w5x_qualified,
check.names = FALSE)
levels(relationshipStatusOverWave$`Status at wave 2`) <- c("Still together", "Broke up", "Partner deceased")
levels(relationshipStatusOverWave$`Status at wave 4`) <- c("Still together", "Broke up or partner deceased")
levels(relationshipStatusOverWave$`Status at wave 5`) <- c("Still together", "Broke up or partner deceased")
N <- length(hcmst$w2_broke_up)
status <- do.call(c, relationshipStatusOverWave)
names(status) <- NULL
wave <- rep(1:5, each = N)
longData <- data.frame(Wave = wave, Status = status)
wave <- rep(2:5, each = N)
longData <- data.frame(Wave = wave, Status = status)
ggplot(data = longData, aes(x = Wave, fill = Status)) + geom_bar() + ggtitle("Barchart to show the relationship status of each survey respondent at each wave of the survey")
longData
relationshipStatusOverWave <- lapply(relationshipStatusOverWave, as.character)
status <- do.call(c, relationshipStatusOverWave)
names(status) <- NULL
wave <- rep(2:5, each = N)
longData <- data.frame(Wave = wave, Status = status)
ggplot(data = longData, aes(x = Wave, fill = Status)) + geom_bar() + ggtitle("Barchart to show the relationship status of each survey respondent at each wave of the survey")
levels(relationshipStatusOverWave$`Status at wave 2`) <- statusLevels
statusLevels <- c("Still together", "Broke up", "Partner deceased")
levels(relationshipStatusOverWave$`Status at wave 2`) <- statusLevels
levels(relationshipStatusOverWave$`Status at wave 3`) <- statusLevels
levels(relationshipStatusOverWave$`Status at wave 4`) <- statusLevels
levels(relationshipStatusOverWave$`Status at wave 5`) <- statusLevels
N <- length(hcmst$w2_broke_up)
relationshipStatusOverWave <- lapply(relationshipStatusOverWave, as.character)
status <- do.call(c, relationshipStatusOverWave)
names(status) <- NULL
wave <- rep(2:5, each = N)
longData <- data.frame(Wave = wave, Status = status)
ggplot(data = longData, aes(x = Wave, fill = Status)) + geom_bar() + ggtitle("Barchart to show the relationship status of each survey respondent at each wave of the survey")
ggplot(data = longData, aes(x = Wave, fill = Status)) + geom_bar() +
ggtitle("Barchart to show the relationship \nstatus of each survey respondent at each wave of the survey")
ggtitle("Barchart to show the relationship status \nof each survey respondent at each wave of the survey")
ggplot(data = longData, aes(x = Wave, fill = Status)) + geom_bar() +
ggtitle("Barchart to show the relationship status \nof each survey respondent at each wave of the survey")
ggplot(data = longData, aes(x = Wave, fill = Status)) + geom_bar() +
ggtitle("Barchart to show the relationship status \nof each survey respondent at each wave \nof the survey")
relationshipStatusOverWave <- data.frame(#`Original relationship status` = hcmst$qflag,
`Status at wave 2` = hcmst$w2_broke_up,
`Status at wave 3` = hcmst$w3_broke_up,
`Status at wave 4` = hcmst4$w4_xqualified,
`Status at wave 5` = hcmst5$w5x_qualified,
check.names = FALSE)
statusLevels <- c("Still together", "Broke up", "Partner deceased")
levels(relationshipStatusOverWave$`Status at wave 2`) <- statusLevels
levels(relationshipStatusOverWave$`Status at wave 3`) <- statusLevels
levels(relationshipStatusOverWave$`Status at wave 4`) <- statusLevels
levels(relationshipStatusOverWave$`Status at wave 5`) <- statusLevels
N <- length(hcmst$w2_broke_up)
relationshipStatusOverWave <- lapply(relationshipStatusOverWave, as.character)
status <- do.call(c, relationshipStatusOverWave)
names(status) <- NULL
wave <- rep(2:5, each = N)
longData <- data.frame(Wave = wave, Status = status)
ggplot(data = longData, aes(x = Wave, fill = Status)) + geom_bar() +
ggtitle("Barchart to show the relationship status \nof each survey respondent at each wave \nof the survey")
library(dplyr)
unique(hcmst$qflag)
relationshipStatusOverWave <- relationshipStatusOverWave %>%
filter(`Original relationship status`=="partnered") %>%
select(-`Original relationship status`)
relationshipStatusOverWave <- relationshipStatusOverWave %>%
filter(`Original relationship status`=="partnered") %>%
select_(-I(`Original relationship status`))
relationshipStatusOverWave <- relationshipStatusOverWave %>%
filter_(`Original relationship status`=="partnered") %>%
select_(-I(`Original relationship status`))
relationshipStatusOverWave <- relationshipStatusOverWave %>%
filter_("Original relationship status"=="partnered") %>%
select_(-I(`Original relationship status`))
relationshipStatusOverWave <- data.frame(`Original relationship status` = hcmst$qflag,
`Status at wave 2` = hcmst$w2_broke_up,
`Status at wave 3` = hcmst$w3_broke_up,
`Status at wave 4` = hcmst4$w4_xqualified,
`Status at wave 5` = hcmst5$w5x_qualified,
check.names = FALSE)
?filter_
vignette("nse")
relationshipStatusOverWave <- relationshipStatusOverWave %>%
filter_(~`Original relationship status`=="partnered") %>%
select_(-"Original relationship status"))
relationshipStatusOverWave <- relationshipStatusOverWave %>%
filter_(~`Original relationship status`=="partnered") %>%
select_(-"Original relationship status")
relationshipStatusOverWave <- relationshipStatusOverWave %>%
filter_(~`Original relationship status`=="partnered")
relationshipStatusOverWave <- data.frame(`Original relationship status` = hcmst$qflag,
`Status at wave 2` = hcmst$w2_broke_up,
`Status at wave 3` = hcmst$w3_broke_up,
`Status at wave 4` = hcmst4$w4_xqualified,
`Status at wave 5` = hcmst5$w5x_qualified,
check.names = FALSE)
relationshipStatusOverWave <- relationshipStatusOverWave %>%
filter_(~`Original relationship status`=="partnered") %>%
select_("Original relationship status")
relationshipStatusOverWave <- relationshipStatusOverWave %>%
filter_(~`Original relationship status`=="partnered") %>%
select_(~`Original relationship status`)
relationshipStatusOverWave
relationshipStatusOverWave <- relationshipStatusOverWave %>%
filter_(~`Original relationship status`=="partnered") %>%
select_(-~`Original relationship status`)
?select
relationshipStatusOverWave <- data.frame(`Original relationship status` = hcmst$qflag,
`Status at wave 2` = hcmst$w2_broke_up,
`Status at wave 3` = hcmst$w3_broke_up,
`Status at wave 4` = hcmst4$w4_xqualified,
`Status at wave 5` = hcmst5$w5x_qualified,
check.names = FALSE)
relationshipStatusOverWave <- relationshipStatusOverWave %>%
filter_(~`Original relationship status`=="partnered") %>%
select_(starts_with("Status"))
relationshipStatusOverWave <- relationshipStatusOverWave %>%
filter_(~`Original relationship status`=="partnered") %>%
select(starts_with("Status"))
View(relationshipStatusOverWave)
statusLevels <- c("Still together", "Broke up", "Partner deceased")
levels(relationshipStatusOverWave$`Status at wave 2`) <- statusLevels
levels(relationshipStatusOverWave$`Status at wave 3`) <- statusLevels
levels(relationshipStatusOverWave$`Status at wave 4`) <- statusLevels
levels(relationshipStatusOverWave$`Status at wave 5`) <- statusLevels
statusLevels <- c("Still together", "Broke up or partner deceased", "Partner deceased")
levels(relationshipStatusOverWave$`Status at wave 2`) <- statusLevels
levels(relationshipStatusOverWave$`Status at wave 3`) <- statusLevels
levels(relationshipStatusOverWave$`Status at wave 4`) <- statusLevels
levels(relationshipStatusOverWave$`Status at wave 5`) <- statusLevels
N <- length(hcmst$w2_broke_up)
relationshipStatusOverWave <- lapply(relationshipStatusOverWave, as.character)
status <- do.call(c, relationshipStatusOverWave)
names(status) <- NULL
wave <- rep(2:5, each = N)
longData <- data.frame(Wave = wave, Status = status)
ggplot(data = longData, aes(x = Wave, fill = Status)) + geom_bar() +
ggtitle("Barchart to show the relationship status \nof each survey respondent at each wave \nof the survey")
?mutate_each
?funs
?levels
?transmute
mutate(mtcars, displ_l = disp / 61.0237)
transmute(mtcars, displ_l = disp / 61.0237)
combineLevels <- function(x){
levels(x) <- c("Still together", "Broke up or partner deceased","Broke up or partner deceased")
return(x)
}
relationshipStatusOverWave <- data.frame(`Original relationship status` = hcmst$qflag,
`Status at wave 2` = hcmst$w2_broke_up,
`Status at wave 3` = hcmst$w3_broke_up,
`Status at wave 4` = hcmst4$w4_xqualified,
`Status at wave 5` = hcmst5$w5x_qualified,
check.names = FALSE)
relationshipStatusOverWave <- relationshipStatusOverWave %>%
filter_(~`Original relationship status`=="partnered") %>%
select(starts_with("Status")) %>%
mutate_(~`Status at wave 2` = combineLevels(~`Status at wave 2`)) %>%
relationshipStatusOverWave <- relationshipStatusOverWave %>%
filter_(~`Original relationship status`=="partnered") %>%
select(starts_with("Status")) %>%
mutate(`Status at wave 2` = combineLevels(~`Status at wave 2`)) %>%
mutate(`Status at wave 2` = combineLevels(~`Status at wave 3`))
View(relationshipStatusOverWave)
levels(relationshipStatusOverWave$`Status at wave 2`)
statusLevels <- c("Broke up", "Partner deceased", "Still together", "Broke up or partner deceased")
levels(relationshipStatusOverWave$`Status at wave 2`) <- statusLevels
levels(relationshipStatusOverWave$`Status at wave 3`) <- statusLevels
levels(relationshipStatusOverWave$`Status at wave 4`) <- statusLevels
levels(relationshipStatusOverWave$`Status at wave 5`) <- statusLevels
oldStatus <- c("Partner deceased", "Still together")
statusLevels <- c("Broke up", "Broke up or partner deceased")
levels(x) <- c(oldStatus, statusLevels)
?sort
res
levels(res) <- "hi"
tempCombine <- function(x){
statusLevels <- c("Broke up", "Partner deceased", "Still together", "Broke up or partner deceased")
levels(x) <- statusLevels
res <- ifelse(x %in% c("Broke up", "Partner deceased"), "Broke up of partner deceased", x)
levels(res) <- c("Still together", "Broke up or partner deceased")
return(res)
}
relationshipStatusOverWave <- data.frame(`Original relationship status` = hcmst$qflag,
`Status at wave 2` = hcmst$w2_broke_up,
`Status at wave 3` = hcmst$w3_broke_up,
`Status at wave 4` = hcmst4$w4_xqualified,
`Status at wave 5` = hcmst5$w5x_qualified,
check.names = FALSE)
relationshipStatusOverWave <- relationshipStatusOverWave %>%
filter_(~`Original relationship status`=="partnered") %>%
select(starts_with("Status"))
tempCombine <- function(x){
statusLevels <- c("Broke up", "Partner deceased", "Still together", "Broke up or partner deceased")
levels(x) <- statusLevels
res <- ifelse(x %in% c("Broke up", "Partner deceased"), "Broke up of partner deceased", x)
levels(res) <- c("Still together", "Broke up or partner deceased")
return(res)
}
relationshipStatusOverWave$`Status at wave 2` <- tempCombine(relationshipStatusOverWave$`Status at wave 2`)
levels(relationshipStatusOverWave$`Status at wave 3`) <- tempCombine(relationshipStatusOverWave$`Status at wave 2`)
levels(relationshipStatusOverWave$`Status at wave 4`) <- c("Still together", "Broke up or partner deceased")
levels(relationshipStatusOverWave$`Status at wave 5`) <- c("Still together", "Broke up or partner deceased")
relationshipStatusOverWave <- lapply(relationshipStatusOverWave, as.character)
status <- do.call(c, relationshipStatusOverWave)
names(status) <- NULL
wave <- rep(2:5, each = N)
longData <- data.frame(Wave = wave, Status = status)
ggplot(data = longData, aes(x = Wave, fill = Status)) + geom_bar() +
ggtitle("Barchart to show the relationship status \nof each survey respondent at each wave \nof the survey")
length(status)
N <- dim(relationshipStatusOverWave)[2]
wave <- rep(2:5, each = N)
longData <- data.frame(Wave = wave, Status = status)
N
dim(relationshipStatusOverWave)
N <- length(relationshipStatusOverWave[[1]])
N
wave <- rep(2:5, each = N)
longData <- data.frame(Wave = wave, Status = status)
ggplot(data = longData, aes(x = Wave, fill = Status)) + geom_bar() +
ggtitle("Barchart to show the relationship status \nof each survey respondent at each wave \nof the survey")
relationshipStatusOverWave <- data.frame(`Original relationship status` = hcmst$qflag,
`Status at wave 2` = hcmst$w2_broke_up,
`Status at wave 3` = hcmst$w3_broke_up,
`Status at wave 4` = hcmst4$w4_xqualified,
`Status at wave 5` = hcmst5$w5x_qualified,
check.names = FALSE)
relationshipStatusOverWave <- relationshipStatusOverWave %>%
filter_(~`Original relationship status`=="partnered") %>%
select(starts_with("Status"))
tempCombine <- function(x){
statusLevels <- c("Broke up", "Partner deceased", "Still together", "Broke up or partner deceased")
levels(x) <- statusLevels
res <- ifelse(x %in% c("Broke up", "Partner deceased"), "Broke up or partner deceased", x)
levels(res) <- c("Still together", "Broke up or partner deceased")
return(res)
}
unique(relationshipStatusOverWave$`Status at wave 2`)
tempCombine <- function(x){
statusLevels <- c("Broke up", "Partner deceased", "Still together", "Broke up or partner deceased")
levels(x) <- statusLevels
res <- ifelse(x %in% c("broke up", "partner deceased", "partner passed away"), "Broke up or partner deceased", x)
levels(res) <- c("Still together", "Broke up or partner deceased")
return(res)
}
relationshipStatusOverWave$`Status at wave 2` <- tempCombine(relationshipStatusOverWave$`Status at wave 2`)
levels(relationshipStatusOverWave$`Status at wave 3`) <- tempCombine(relationshipStatusOverWave$`Status at wave 2`)
levels(relationshipStatusOverWave$`Status at wave 4`) <- c("Still together", "Broke up or partner deceased")
levels(relationshipStatusOverWave$`Status at wave 5`) <- c("Still together", "Broke up or partner deceased")
N <- length(relationshipStatusOverWave[[1]])
relationshipStatusOverWave <- lapply(relationshipStatusOverWave, as.character)
status <- do.call(c, relationshipStatusOverWave)
names(status) <- NULL
wave <- rep(2:5, each = N)
longData <- data.frame(Wave = wave, Status = status)
ggplot(data = longData, aes(x = Wave, fill = Status)) + geom_bar() +
ggtitle("Barchart to show the relationship status \nof each survey respondent at each wave \nof the survey")
?ifelse
tempCombine <- function(x){
statusLevels <- c("Broke up", "Partner deceased", "Still together", "Broke up or partner deceased")
levels(x) <- statusLevels
res <- ifelse(x %in% c("broke up", "partner deceased", "partner passed away"), "Broke up or partner deceased", x)
res <- ifelse(res=="still together", "Still together", res)
levels(res) <- c("Still together", "Broke up or partner deceased")
return(res)
}
relationshipStatusOverWave <- data.frame(`Original relationship status` = hcmst$qflag,
`Status at wave 2` = hcmst$w2_broke_up,
`Status at wave 3` = hcmst$w3_broke_up,
`Status at wave 4` = hcmst4$w4_xqualified,
`Status at wave 5` = hcmst5$w5x_qualified,
check.names = FALSE)
relationshipStatusOverWave <- relationshipStatusOverWave %>%
filter_(~`Original relationship status`=="partnered") %>%
select(starts_with("Status"))
tempCombine <- function(x){
statusLevels <- c("Broke up", "Partner deceased", "Still together", "Broke up or partner deceased")
levels(x) <- statusLevels
res <- ifelse(x %in% c("broke up", "partner deceased", "partner passed away"), "Broke up or partner deceased", x)
res <- ifelse(res=="still together", "Still together", res)
levels(res) <- c("Still together", "Broke up or partner deceased")
return(res)
}
relationshipStatusOverWave$`Status at wave 2` <- tempCombine(relationshipStatusOverWave$`Status at wave 2`)
levels(relationshipStatusOverWave$`Status at wave 3`) <- tempCombine(relationshipStatusOverWave$`Status at wave 2`)
levels(relationshipStatusOverWave$`Status at wave 4`) <- c("Still together", "Broke up or partner deceased")
levels(relationshipStatusOverWave$`Status at wave 5`) <- c("Still together", "Broke up or partner deceased")
N <- length(relationshipStatusOverWave[[1]])
relationshipStatusOverWave <- lapply(relationshipStatusOverWave, as.character)
status <- do.call(c, relationshipStatusOverWave)
names(status) <- NULL
wave <- rep(2:5, each = N)
longData <- data.frame(Wave = wave, Status = status)
ggplot(data = longData, aes(x = Wave, fill = Status)) + geom_bar() +
ggtitle("Barchart to show the relationship status \nof each survey respondent at each wave \nof the survey")
levels(relationshipStatusOverWave$`Status at wave 2`)
relationshipStatusOverWave <- data.frame(`Original relationship status` = hcmst$qflag,
`Status at wave 2` = hcmst$w2_broke_up,
`Status at wave 3` = hcmst$w3_broke_up,
`Status at wave 4` = hcmst4$w4_xqualified,
`Status at wave 5` = hcmst5$w5x_qualified,
check.names = FALSE)
relationshipStatusOverWave <- relationshipStatusOverWave %>%
filter_(~`Original relationship status`=="partnered") %>%
select(starts_with("Status"))
levels(relationshipStatusOverWave$`Status at wave 2`)
tempCombine <- function(x){
x <- as.character(x)
res <- ifelse(x %in% c("broke up", "partner deceased", "partner passed away"), "Broke up or partner deceased", x)
res <- ifelse(res=="still together", "Still together", res)
levels(res) <- c("Still together", "Broke up or partner deceased")
return(res)
}
relationshipStatusOverWave$`Status at wave 2` <- tempCombine(relationshipStatusOverWave$`Status at wave 2`)
levels(relationshipStatusOverWave$`Status at wave 3`) <- tempCombine(relationshipStatusOverWave$`Status at wave 2`)
levels(relationshipStatusOverWave$`Status at wave 4`) <- c("Still together", "Broke up or partner deceased")
levels(relationshipStatusOverWave$`Status at wave 5`) <- c("Still together", "Broke up or partner deceased")
levels(relationshipStatusOverWave$`Status at wave 3`) <- tempCombine(relationshipStatusOverWave$`Status at wave 3`)
N <- length(relationshipStatusOverWave[[1]])
relationshipStatusOverWave <- lapply(relationshipStatusOverWave, as.character)
status <- do.call(c, relationshipStatusOverWave)
names(status) <- NULL
wave <- rep(2:5, each = N)
longData <- data.frame(Wave = wave, Status = status)
ggplot(data = longData, aes(x = Wave, fill = Status)) + geom_bar() +
ggtitle("Barchart to show the relationship status \nof each survey respondent at each wave \nof the survey")
status <- factor(status, levels = c("Still together", "Broke up or partner deceased"))
wave <- rep(2:5, each = N)
longData <- data.frame(Wave = wave, Status = status)
ggplot(data = longData, aes(x = Wave, fill = Status)) + geom_bar() +
ggtitle("Barchart to show the relationship status \nof each survey respondent at each wave \nof the survey")
relationshipStatusOverWave <- data.frame(`Original relationship status` = hcmst$qflag,
`Status at wave 2` = hcmst$w2_broke_up,
`Status at wave 3` = hcmst$w3_broke_up,
`Status at wave 4` = hcmst4$w4_xqualified,
`Status at wave 5` = hcmst5$w5x_qualified,
check.names = FALSE)
relationshipStatusOverWave <- relationshipStatusOverWave %>%
filter_(~`Original relationship status`=="partnered") %>%
select(starts_with("Status"))
tempCombine <- function(x){
x <- as.character(x)
res <- ifelse(x %in% c("broke up", "partner deceased", "partner passed away"), "Broke up or partner deceased", x)
res <- ifelse(res=="still together", "Still together", res)
levels(res) <- c("Still together", "Broke up or partner deceased")
return(res)
}
relationshipStatusOverWave$`Status at wave 2` <- tempCombine(relationshipStatusOverWave$`Status at wave 2`)
levels(relationshipStatusOverWave$`Status at wave 3`) <- tempCombine(relationshipStatusOverWave$`Status at wave 3`)
levels(relationshipStatusOverWave$`Status at wave 4`) <- c("Broke up or partner deceased", "Still together")
levels(relationshipStatusOverWave$`Status at wave 5`) <- c("Broke up or partner deceased", "Still together")
N <- length(relationshipStatusOverWave[[1]])
status <- do.call(c, relationshipStatusOverWave)
names(status) <- NULL
status <- factor(status, levels = c("Still together", "Broke up or partner deceased"))
wave <- rep(2:5, each = N)
longData <- data.frame(Wave = wave, Status = status)
ggplot(data = longData, aes(x = Wave, fill = Status)) + geom_bar() +
ggtitle("Barchart to show the relationship status \nof each survey respondent at each wave \nof the survey")
relationshipStatusOverWave <- data.frame(`Original relationship status` = hcmst$qflag,
`Status at wave 2` = hcmst$w2_broke_up,
`Status at wave 3` = hcmst$w3_broke_up,
`Status at wave 4` = hcmst4$w4_xqualified,
`Status at wave 5` = hcmst5$w5x_qualified,
check.names = FALSE)
relationshipStatusOverWave <- relationshipStatusOverWave %>%
filter_(~`Original relationship status`=="partnered") %>%
select(starts_with("Status"))
tempCombine <- function(x){
x <- as.character(x)
res <- ifelse(x %in% c("broke up", "partner deceased", "partner passed away"), "Broke up or partner deceased", x)
res <- ifelse(res=="still together", "Still together", res)
levels(res) <- c("Still together", "Broke up or partner deceased")
return(res)
}
relationshipStatusOverWave$`Status at wave 2` <- tempCombine(relationshipStatusOverWave$`Status at wave 2`)
levels(relationshipStatusOverWave$`Status at wave 3`) <- tempCombine(relationshipStatusOverWave$`Status at wave 3`)
levels(relationshipStatusOverWave$`Status at wave 4`) <- c("Broke up or partner deceased", "Still together")
levels(relationshipStatusOverWave$`Status at wave 5`) <- c("Broke up or partner deceased", "Still together")
N <- length(relationshipStatusOverWave[[1]])
status <- do.call(c, relationshipStatusOverWave)
names(status) <- NULL
status <- factor(status, levels = c("Still together", "Broke up or partner deceased"))
status
status <- do.call(c, relationshipStatusOverWave)
names(status) <- NULL
status
relationshipStatusOverWave <- lapply(relationshipStatusOverWave, as.character)
status <- do.call(c, relationshipStatusOverWave)
names(status) <- NULL
status
status <- factor(status, levels = c("Still together", "Broke up or partner deceased"))
wave <- rep(2:5, each = N)
longData <- data.frame(Wave = wave, Status = status)
ggplot(data = longData, aes(x = Wave, fill = Status)) + geom_bar() +
ggtitle("Barchart to show the relationship status \nof each survey respondent at each wave \nof the survey")
hcmst4$w4_broke_up
relationshipStatusOverWave <- data.frame(`Original relationship status` = hcmst$qflag,
`Status at wave 2` = hcmst$w2_broke_up,
`Status at wave 3` = hcmst$w3_broke_up,
`Status at wave 4` = hcmst4$w4_broke_up,
`Status at wave 5` = hcmst5$w5_broke_up,
check.names = FALSE)
relationshipStatusOverWave <- relationshipStatusOverWave %>%
filter_(~`Original relationship status`=="partnered") %>%
select(starts_with("Status"))
tempCombine <- function(x){
x <- as.character(x)
res <- ifelse(x %in% c("broke up", "partner deceased", "partner passed away"), "Broke up or partner deceased", x)
res <- ifelse(res=="still together", "Still together", res)
levels(res) <- c("Still together", "Broke up or partner deceased")
return(res)
}
relationshipStatusOverWave <- lapply(relationshipStatusOverWave, tempCombine)
N <- length(relationshipStatusOverWave[[1]])
N
relationshipStatusOverWave <- lapply(relationshipStatusOverWave, as.character)
status <- do.call(c, relationshipStatusOverWave)
names(status) <- NULL
status <- factor(status, levels = c("Still together", "Broke up or partner deceased"))
wave <- rep(2:5, each = N)
longData <- data.frame(Wave = wave, Status = status)
ggplot(data = longData, aes(x = Wave, fill = Status)) + geom_bar() +
ggtitle("Barchart to show the relationship status \nof each survey respondent at each wave \nof the survey")
ggplot(data = longData, aes(x = Wave, fill = Status)) + geom_bar() +
ggtitle("Barchart to show the relationship status \nof each survey respondent at each wave \nof the survey") + ylab("Count")
getwd()
# setwd("/home/paulin/Documents/paulinshek.github.io/_sources")
setwd("/home/paulin/Documents/paulinshek.github.io/_sources")
setwd("/home/paulin/Documents/paulinshek.github.io/_source")
servr::jekyll()
servr::jekyll()
setwd("/home/paulin/Documents/paulinshek.github.io")
servr::jekyll()
servr::jekyll()
options_chunk
?options_chunk
?option_chunk
servr::jekyll()
?system.file
servr::jekyll()
?knitr::opts_chunk
servr::jekyll()
